/*//In this case, we are making a point turn
		if(rightTurningRadius != rightTurningRadius)
			rightTurningRadius = botRadius;
		if(leftTurningRadius != leftTurningRadius)
			leftTurningRadius = botRadius;

		//Find the change in theta
		if(abs(rightArcLength) > abs(leftArcLength)) //Bot is making a Left Turn (positive change in x)
		{
			//Is it turning about one wheel
			if(leftTurningRadius == 0)
				deltaTheta = rightTurningRadius/ (2*botRadius);
			else
				deltaTheta = leftArcLength / leftTurningRadius;

			//If the center of rotation is inside the bot, else...
			if( (rightArcLength/abs(rightArcLength)) != leftArcLength/abs(leftArcLength) )
			{
				deltaX = (leftTurningRadius + botRadius) * (1 - cos(deltaTheta));
				deltaY = -(leftTurningRadius + botRadius) * sin(deltaTheta);
			}
			else
			{
				deltaX = -(leftTurningRadius + botRadius) * (1 - cos(deltaTheta));
				deltaY = (leftTurningRadius + botRadius) * sin(deltaTheta);
			}
		}
		else if(abs(leftArcLength) > abs(rightArcLength)) //Bot is making a Right Turn (negative change in x)
		{
			//Is it turning about one wheel
			if(rightTurningRadius == 0)
				deltaTheta = -leftTurningRadius/ (2*botRadius);
			else 
				deltaTheta = -rightArcLength / rightTurningRadius;

			//If the center of rotation is inside the bot, else...
			if( (rightArcLength/abs(rightArcLength)) != leftArcLength/abs(leftArcLength) )
			{
				deltaX = -(leftTurningRadius + botRadius) * (1 - cos(deltaTheta));
				deltaY = (leftTurningRadius + botRadius) * sin(deltaTheta);
			}
			else
			{
				deltaX = (rightTurningRadius + botRadius) * (1 - cos(deltaTheta));
				deltaY = -(rightTurningRadius + botRadius) * sin(deltaTheta);
			}
		}
		else // bot is going straight
		{
			deltaTheta = 0;
			deltaX = 0;
			deltaY = wheelRadius * rightDeltaPhi;
		}	

		cout << "delta Theta: " << deltaTheta << endl;
		cout << "delta X: " << deltaX << endl;
		cout << "delta Y: " << deltaY << endl;

		//Calculate absolte position and orientation
		absoluteX += deltaX;
		absoluteY += deltaY;
		absoluteTheta += deltaTheta;

		//Calculate errors
		errorX = desiredX - absoluteX;
		errorY = desiredY - absoluteY;
		errorTheta = desiredTheta - absoluteTheta;

		cout << "Abosulte Theta: " << absoluteTheta << endl;
		cout << "Absolute X: " << absoluteX << endl;
		cout << "Absolute Y: " << absoluteY << endl;

		cout << "Error x: " << errorX << endl;
		cout << "Error y: " << errorY << endl;
		cout << "Error Theta: " << errorTheta << endl;

		cout << "-KPX*errorX: " << -KPX*errorX << endl;
		cout << "-KPY*errorY: " << -KPY*errorY << endl;
		cout << "-KPTheta*errorTheta: " << -KPTheta*errorTheta << endl;

		//Calculate the proportional feedback response
		leftProportional = (-KPX * errorX - KPY * errorY + KPTheta * errorTheta);
		rightProportional = (KPX * errorX - KPY * errorY - KPTheta * errorTheta);

		//Calculate the feedback response
		leftOutputPower = (int) leftProportional;
		rightOutputPower = (int) rightProportional;

		cout << "leftOutputPower: " << leftOutputPower << endl;
		cout << "rightOutputPower: " << rightOutputPower << endl;

		if(abs(leftOutputPower) > 150)
		{
			leftOutputPower = 150*(leftOutputPower/abs(leftOutputPower));
		}

		if(abs(rightOutputPower) > 150)
		{
			rightOutputPower = 150*(rightOutputPower/abs(rightOutputPower));
		}


		device.SetCommand(_GO, 2, leftOutputPower);
		device.SetCommand(_GO, 1, rightOutputPower);

		//cout << "error Theta: " << errorTheta << endl;
		//cout << "error X: " << errorX << endl;
		//cout << "error Y: " << errorY << endl;

		//Stop when the bot is within an inch
		if(abs(errorX) < errorXThresh && abs(errorY) < errorYThresh && abs(errorTheta) < errorThetaThresh)
		{	
			device.SetCommand(_GO, 2, 0);
			device.SetCommand(_GO, 1, 0);
			return true;
		}
	}
	
	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	
	//sleep(2);

	errorXThresh = 200;
	errorYThresh = 200;
	KPX = 0;
	KPY = 0;
	poseControl(0, 0, 2.67*5.8);	//Turn 90 degrees

	//sleep(2);

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	

	errorXThresh = 100;
	errorYThresh = 100;
	errorThetaThresh = 1.2;
	KPX = 3;
	KPY = 1;
	poseControl(0, 200, 0);		//Drive straight

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	
	//sleep(2);

	errorXThresh = 200;
	errorYThresh = 200;
	KPX = 0;
	KPY = 0;
	poseControl(0, 0, 2.67*5.8);	//turn 90 degrees

	//sleep(2);

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	

	errorXThresh = 100;
	errorYThresh = 100;
	errorThetaThresh = 1.2;
	KPX = 3;
	KPY = 1;
	poseControl(0, 200, 0);		//Drive straight

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	
	//sleep(2);

	errorXThresh = 200;
	errorYThresh = 200;
	KPX = 0;
	KPY = 0;
	poseControl(0, 0, 2.67*5.8);	//Turn 90 degrees

	//sleep(2);

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	

	errorXThresh = 100;
	errorYThresh = 100;
	errorThetaThresh = 1.2;
	KPX = 3;
	KPY = 1;
	poseControl(0, 200, 0);		//Drive straight

	readAbsoluteEncoderCount(leftEncoderCount, 2);
	readAbsoluteEncoderCount(rightEncoderCount, 1);	
	//sleep(2);

	errorXThresh = 200;
	errorYThresh = 200;
	KPX = 0;
	KPY = 0;
	poseControl(0, 0, 2.67*5.8);	//Turn 90 degrees

	return true;
}*/
