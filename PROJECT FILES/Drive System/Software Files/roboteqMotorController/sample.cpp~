#include <iostream>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

#include "RoboteqDevice.h"
#include "ErrorCodes.h"
#include "Constants.h"

using namespace std;

////////////////////////////////////////////
//Function Declarations
////////////////////////////////////////////
void turnRight(RoboteqDevice motorDevice);

void goStraight(RoboteqDevice motorDevice);

void moveSquare(RoboteqDevice motorDevice);

/////////////////////////////////
//Main
/////////////////////////////////
int main(int argc, char *argv[])
{
	string response = "";
	RoboteqDevice device;
	int status = device.Connect("/dev/ttyACM0");

	if(status != RQ_SUCCESS)
	{
		cout<<"Error connecting to device: "<<status<<"."<<endl;
		return 1;
	}

	cout<<"- SetConfig(_DINA, 1, 1)...";
	if((status = device.SetConfig(_DINA, 1, 1)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"succeeded."<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	int result;
	cout<<"- GetConfig(_DINA, 1)...";
	if((status = device.GetConfig(_DINA, 1, result)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"returned --> "<<result<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	cout<<"- GetValue(_ANAIN, 1)...";
	if((status = device.GetValue(_ANAIN, 1, result)) != RQ_SUCCESS)
		cout<<"failed --> "<<status<<endl;
	else
		cout<<"returned --> "<<result<<endl;

	//Wait 10 ms before sending another command to device
	sleepms(10);

	//cout<<"- SetCommand(_GO, 2, 150)...";
	//if((status = device.SetCommand(_GO, 2, 150)) != RQ_SUCCESS)
	//	cout<<"failed --> "<<status<<endl;
	//else
	//	cout<<"succeeded."<<endl;

	//cout<<"- SetCommand(_GO, 2, 150)...";
	//if((status = device.SetCommand(_GO, 1, -150)) != RQ_SUCCESS)
	//	cout<<"failed --> "<<status<<endl;
	//else
	//	cout<<"succeeded."<<endl;

	//turnRight(device);
	//goStraight(device);
	moveSquare(device);

	device.Disconnect();
	return 0;
}

////////////////////////////////////////////
//Function Definitions
////////////////////////////////////////////
void turnRight(RoboteqDevice motorDevice){
	clock_t initialTime, elapsedTime;
	int motionTime = 9000;

	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < motionTime){
	motorDevice.SetCommand(_GO, 1, -150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	motorDevice.SetCommand(_GO, 1, 0);
	motorDevice.SetCommand(_GO, 2, 0);
}

void goStraight(RoboteqDevice motorDevice){
	clock_t initialTime, elapsedTime;
	int motionTime = 15000;

	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < motionTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	motorDevice.SetCommand(_GO, 1, 0);
	motorDevice.SetCommand(_GO, 2, 0);
}

void moveSquare(RoboteqDevice motorDevice){
	clock_t initialTime, elapsedTime;
	int straightTime = 30000;
	int turnTime = 9000;

	//go straight
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < straightTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	motorDevice.SetCommand(_GO, 1, 0);
	motorDevice.SetCommand(_GO, 2, 0);

	//turn right
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < turnTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, -150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	//go straight
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < straightTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	motorDevice.SetCommand(_GO, 1, 0);
	motorDevice.SetCommand(_GO, 2, 0);

	//turn right
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < turnTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, -150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	//go straight
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < straightTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	//turn right
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < turnTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, -150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	//go straight
	initialTime = clock();
	elapsedTime = 0;

	while(elapsedTime < straightTime){
	motorDevice.SetCommand(_GO, 1, 150);
	motorDevice.SetCommand(_GO, 2, 150);
	cout << elapsedTime << "    " << CLOCKS_PER_SEC << endl;
	elapsedTime = clock() - initialTime;
	}

	motorDevice.SetCommand(_GO, 1, 0);
	motorDevice.SetCommand(_GO, 2, 0);

	//goStraight(motorDevice);
	//turnRight(motorDevice);
	//goStraight(motorDevice);
	//turnRight(motorDevice);
	//goStraight(motorDevice);
	//turnRight(motorDevice);
	//goStraight(motorDevice);
	//turnRight(motorDevice);
}
